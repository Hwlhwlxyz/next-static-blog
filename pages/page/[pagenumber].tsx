import { useRouter } from "next/router";
import ErrorPage from "next/error";
import React, { ReactElement, useEffect, useState } from "react";
import styles from "../../styles/Home.module.css";
import markdownToHtml from "../../lib/api/markdownToHtml";
import PostBody from "../../components/post-body";
import { getAllPosts, getAllTags, getPostBySlug } from "../../lib/api/posts";
import Layout from "../../components/layout/layout";
import { LayoutSidebar } from "../../components/layout/sidebar";
import blogConfig from "../../blogConfig.json";
import PostType from "../../lib/models/post";
import Head from "next/head";
import MainPage from "../../components/mainpage";
import { Pagination } from "../../components/pagination";


type Props = {
    postsToDisplay: PostType[];
  tags: string[];
  pagenumber: number;
  totalnumber: number;
};

const PostPage = ({ postsToDisplay, tags, pagenumber, totalnumber }: Props) => {
//   const postsToDisplay = getPostToDisplay(allPosts, pagenumber);
  const router = useRouter();
  console.log(postsToDisplay);
  console.log(postsToDisplay.length);
  console.log("postsToDisplay", postsToDisplay);
  console.log(totalnumber,blogConfig.postPerPage,totalnumber/blogConfig.postPerPage)
  let totalPageNumber = Math.ceil(totalnumber/blogConfig.postPerPage);
  if (!router.isFallback && !postsToDisplay) {
    return <ErrorPage statusCode={404} />
  }

  

  return (
    <div className={styles.container}>
      <Head>
        <title>next static blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <MainPage allPosts={postsToDisplay} />
      </main>

      <Pagination className={styles.pagination} selectedClassName={styles.selected} pageNumber={pagenumber} totalPageNumber={totalPageNumber} hrefPrefix={null} pageRangeDisplayed={undefined} />

      <footer className={styles.footer}>

        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <img src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

PostPage.getLayout = function getLayout(page: ReactElement) {
  console.log(page);
  let tags = page.props.tags;
  return (
    <Layout>
      <LayoutSidebar tags={tags} />
      {page}
    </Layout>
  );
};

function getPostToDisplay(allPosts: PostType[], pageNumber: number) {
  const postsToDisplay = allPosts.splice(
    (pageNumber - 1) * blogConfig.postPerPage,
    Math.min(pageNumber * blogConfig.postPerPage, allPosts.length)
  );
  return postsToDisplay;
}

export default PostPage;

type Params = {
  params: {
    pagenumber: number;
  };
};

export async function getStaticProps({ params }: Params) {
  const pageNumber = params.pagenumber;
  const pagenumber = pageNumber;
  let allPosts: any = null;
  allPosts = getAllPosts(["title", "date", "slug", "coverImage", "excerpt"]);
  console.log(allPosts);
  const totalnumber = allPosts.length;
    const postsToDisplay = getPostToDisplay(allPosts, pagenumber);
  const tags = getAllTags();
  return {
    props: { postsToDisplay, tags, pagenumber, totalnumber },
  };
}

export async function getStaticPaths() {
  const posts = await getAllPosts(["slug", "path"]);
  let totalPageNumber = 1;
  if (blogConfig.postPerPage == null) {
    let totalPageNumber = 1;
  } else {
    totalPageNumber = posts.length / blogConfig.postPerPage;
  }
  let numArr = [];
  for (let i = 0; i < totalPageNumber; i++) {
    numArr.push(i + 1);
  }
  console.log("posts:", posts);
  return {
    paths: numArr.map((num: any) => {
      return {
        params: {
          pagenumber: num.toString(),
        },
      };
    }),
    fallback: false,
  };
}
